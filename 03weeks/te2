!+tab : html 바로 만들기
html -> 트리 구조 형성 (노드(태그) > 엘리멘트 > )


<!DOCTYPE html>
<html lang="en">        <<lang : 속성, en: 값>>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>첫 번째</title>
    <link rel="stylesheet" href="reviewCSS.css">
</head>
<body>
    <header>
        <h1> 웹페이지 복습 </h1>        <<h1: 헤딩 1 (제목) >>
    </header> <- 컨텐츠가 직접적으로 나오지 않는 시멘틱 태그
    <article></article>
    <footer></footer>
</body>
</html>


css -> 셀렉터[h1](어떤 노드를 선택할지 고름) -> (어떻게 꾸밀지 정의)
id, class -> #이름붙이기
link 외부파일 연결태그 head태그에 쓰기 
이벤트 리스너
css : href, js : src

js
()<매개변수)
메소드,  함수 이름
*괄호 포함시 : 메소드

자바스크립트 데이터 타입 : int, String, Boolean

함수 선언
var,let,const=함수이름
null : 없음      <<var b=null;>>
undefine : 정의 되지 않음    <<ex) let a j>>  
nan : not a number -> 정수가 아님

typeof() : 변수 타입 도출
const c=숫자,문자,부울린    const = 상수, 값을 한번 정하면 변경할 수 없음

var, let의 차이 : let은 변수 선언후 재선언 불가, var은 재선언 가능
`` : 백틱, $[변수이름/식]

alert : 매세지를 주는 윈도우 메소드 창
prompt : 입력을 받는 대화상자 ,string 타입
confrm : 부울린 출력 버튼 대화상자 확인-> true, 취소 -> false
default : 해당 조건이 없을시 
break : 반복문을 끝냄 -> while, switch, for문 (if문 불가)
countenue : 반복문을 처음으로 올라감 -> while, switch, for
number() : 숫자화
parse Int() : 숫자화 (=number)

연산자
&& : and 연산자

nodejs : 자바스크립트 별도로 실행


※ 배열(4-1)
let a=[];
let a=new Array();   <- a라는 배열 생성
a[0]=1;     <- 0번방에 1값 선언
a[1]=3;

● 배열.length
length : 배열의 갯수가 들어 있는 속성
● 배열.push(요소)
● 콜백 메소드 
for (const 변수 in 배열명)
for in : 인덱스 번호 리턴
for of : 인덱스 값 리턴

※ 함수
● 함수 생성
function 함수이름() {}  <- 함수 선언
let 함수 = function() {};   <- 선언적 함수
funciton () <- 익명 함수 :

자바스크립트(5-1) : 인터프리터 방식 -> 호이스팅 과정 : 전처리 과정
    a();
    function a() {}
    >> true
익명 함수 : function() : 즉시 호출, 호이스팅 불가
    b();
    let b = function() {}
    >> false

콜백함수 : 매게변수로 function을 주고 받음
    funciton test(a){ 
        a();
    }
    test(function ()  {});


화살표 (=>) 함수(5-2(7)) : 
let funcA=(매개변수)=>리턴값;

let funcA=function(매개변수) => {     
    return 리턴값
};
=
let funcA=(매개변수) => 리턴값;




<script>
    function min(array) {
        let output = array[0]
        for (const item of array) {
            function prompt("&{array}번째 숫자 입력 : ");
        if (output > item) {
            output = item
        }
     
    }
    return output
    }
    
    const testArray = [52, 273, 32, 103, 275, 24, 57]
    console.log('${0}, ${1}, ${2} 중에서')
    console.log('최소값 = ${min(testArray)}')

    </script>





    -- 3주차


함수 선언 3가지
선언적 함수
익명 => 함수
콜백함수

배열 : []
객체 : 속성과 메소드 {}
    메소드, 프로퍼티 구분 : ()가 없으면 프로퍼티

챕터 6.
제이슨 : 프로퍼티로만 이루어진 객체 형태


챕터 7.
브라우저 동작 순서
html, css 트리 구성-> 합쳐서 렌더링 (렌더트리) -> 화면에표시 (페인트) 

현재 스태틱한 문서에서 어느 트리를 선택할지 고르는 메소드
corst header = document.querySelector('h1')        /* css의 설렉터와 유사 #,     / 클래스 : .        / 앵커태그
corst header = document.querySelectorALL('h1') : h1노드의 문서 객체를 배열의 여러 객체로 들어감

스타일 조작하기
('body > div') body 태그 아래 div 태그 선택

7-2 이벤트 활용(ppt.27)
이벤트 : 문서에 변화를 주기 위한 신호
이벤트 소스 : 신호를 발생시키는 요소
이벤트 리스너 : 신호가 발생했을떄 정해둔 동작

이벤트 리스너를 이벤트 소스에 붙이는 방법 3가지
    표준이벤트 모델 : addEventListener()
    고전 이벤트 모델 : 문서 객체가 갖고 있는 onㅁㅁ으로 시작하는 속성에 함수를 할당해서 연결
    인라인 이벤트 모델 : onㅁㅁ으로 시작하는 속성을 html 요소에 직접 넣어서 연결    ex) onclick




노드js 버전 확인 및 설치 여부 확인
node -v

npm 설치 여부 확인
npm -v